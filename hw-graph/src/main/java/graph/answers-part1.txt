## CSE 331 hw-graph Part 1 Questions

## Section 1
###########################################################################

1. Write an AF and RI for IntQueue1 and IntQueue2.

    ### IntQueue1

    Abstraction Function: A linked list queue of integers in this.entries. The queue is empty
    if it has no integers stored;

    Representation Invariant: entries != null;


    ### IntQueue2

    Abstraction Function: A circular array queue of integers in this.entries, with this.front pointing to
    the first element in the queue, and this.size representing the number of elements in the queue;

    Representation Invariant: entries != null && 0 <= size && 0 <= front < entries.length;


2. Group the snapshots of IntQueue2's internal state into groups that have the same abstract state.
a, d, and g are equivalent
c and f are equivalent
b and h are equivalent


3. For each signature below, state and justify in 1-2 sentences (per part) whether the method or constructor
could possibly expose the representation, given the information available. Explain any assumptions you made.

    a. `public int solveEquations(int x, int y, int z)`
        This shouldn't expose the representation since it takes and returns integers, which are immutable,
        and since int is a primitive type, it will return a copy


    b. `public String[] decode(boolean slowly)`
        This could pose an issue since it returns a String array, which can be mutable and the client can mutate it,
        which could expose the rep


    c. `private Date myBirthday()`
        If the Date returned is not a copy of the original and is mutable, it could expose the rep


    d. `public String toString()`
        Since String is immutable, this doesn't have any issues of rep exposure


    e. `public Iterator<Integer> elements()`
        The Iterator can cause rep exposure if it references the original collection not as
        an unmodifiable list and supports remove


    f. `public Deck(List<Card> cards)`
        This can expose the rep if the constructor directly references the cards list


## Section 2
###########################################################################

Briefly explain why you included the operations you did and why you feel they are a sufficient
interface to a graph. If your design includes multiple classes or interfaces, explain why you
included each one; if not, explain whether you considered additional classes and why you decided
not to include them.
addEdge and addNode are to add nodes and edges to the graph
Furthermore, I added getChildren and getNodes to return relevant node information
I also added getLabel and getChild as part of the Edge class to return relevant edge information
I added a separate Edge class because I felt it would be easier to manage and understand how edges
work if methods regarding a single edge were put in their own class, but I didn't add it to the spec
since the class is private.


## Section 3
###########################################################################

What was your testing strategy for this assignment? How do your script tests and JUnit tests
differ from each other (if they do), and why?
I wanted to make sure I tested the basic cases for my objects (graph, node, edge), and since
the script tests basically covers it all, the only test that I have in my JUnit tests is
an exception test to make sure getChildren throws the exception properly. The script tests
pretty much check all the necessary test cases (from my knowledge) so the only things that
the JUnit tests are needed for is for exception checking, at least for now

